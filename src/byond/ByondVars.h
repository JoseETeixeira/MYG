#pragma once
#include <string>

namespace BYOND{
    
    class ByondVars {

        public:
            static inline std::string  ADDRESS = "address";
            static inline std::string  ALPHA = "alpha";
            static inline std::string  ANIMATE_MOVEMENT = "animate_movement";
            static inline std::string  APPEARANCE = "appearance";
            static inline std::string  APPEARANCE_FLAGS = "appearance_flags";
            static inline std::string  AREA = "area";
            static inline std::string  AUTHENTICATE = "authenticate";
            static inline std::string  BLEND_MODE = "blend_mode";
            static inline std::string  BOUND_HEIGHT = "bound_height";
            static inline std::string  BOUND_WIDTH = "bound_width";
            static inline std::string  BOUND_X = "bound_x";
            static inline std::string  BOUND_Y = "bound_y";
            static inline std::string  BOUNDS = "bounds";
            static inline std::string  BYOND_VERSION = "byond_version";
            static inline std::string  CACHE_LIFESPAN = "cache_lifespan";
            static inline std::string  CD = "cd";
            static inline std::string  CGI = "CGI";
            static inline std::string  CHANNEL = "channel";
            static inline std::string  CKEY = "ckey";
            static inline std::string  CLIENT = "client";
            static inline std::string  COLOR = "color";
            static inline std::string  COMMAND_TEXT = "command_text";
            static inline std::string  COMPUTER_ID = "computer_id";
            static inline std::string  CONNECTION = "connection";
            static inline std::string  CONTENTS = "contents";
            static inline std::string  CONTROL_FREAK = "control_freak";
            static inline std::string  CPU = "cpu";
            static inline std::string  DEFAULT_VERB_CATEGORY = "default_verb_category";
            static inline std::string  DENSITY = "density";
            static inline std::string  DESC = "desc";
            static inline std::string  DIR = "dir";
            static inline std::string  ECHO = "echo";
            static inline std::string  EDGE_LIMIT = "edge_limit";
            static inline std::string  ENVIRONMENT = "environment";
            static inline std::string  EOFI = "eof"; //FROM EOF
            static inline std::string  EXECUTOR = "executor";
            static inline std::string  EYE = "eye";
            static inline std::string  FALLOFF = "falloff";
            static inline std::string  FILE = "file";
            static inline std::string  FLAGS = "flags";
            static inline std::string  FPS = "fps";
            static inline std::string  FREQUENCY = "frequency";
            static inline std::string  GAME_STATE = "game_state";
            static inline std::string  GENDER = "gender";
            static inline std::string  GLIDE_SIZE = "glide_size";
            static inline std::string  GLOBAL = "global";
            static inline std::string  GROUP = "group";
            static inline std::string  HOST = "host";
            static inline std::string  HUB = "hub";
            static inline std::string  HUB_PASSWORD = "hub_password";
            static inline std::string  ICON = "icon";
            static inline std::string  ICON_SIZE = "icon_size";
            static inline std::string  ICON_STATE = "icon_state";
            static inline std::string  IMAGES = "images";
            static inline std::string  INACTIVITY = "inactivity";
            static inline std::string  INDEX = "index";
            static inline std::string  INFRA_LUMINOSITY = "infra_luminosity";
            static inline std::string  INTERNET_ADDRESS = "internet_address";
            static inline std::string  INVISIBILITY = "invisibility";
            static inline std::string  KEY = "key";
            static inline std::string  LAYER = "layer";
            static inline std::string  LAZY_EYE = "lazy_eye";
            static inline std::string  LEN = "len";
            static inline std::string  LOC = "loc";
            static inline std::string  LOCS = "locs";
            static inline std::string  LOG = "log";
            static inline std::string  LOOP_CHECKS = "loop_checks";
            static inline std::string  LUMINOSITY = "luminosity";
            static inline std::string  MAP_FORMAT = "map_format";
            static inline std::string  MAPTEXT = "maptext";
            static inline std::string  MAPTEXT_HEIGHT = "maptext_height";
            static inline std::string  MAPTEXT_WIDTH = "maptext_width";
            static inline std::string  MAPTEXT_X = "maptext_x";
            static inline std::string  MAPTEXT_Y = "maptext_y";
            static inline std::string  MATCH = "match";
            static inline std::string  MAXX = "maxx";
            static inline std::string  MAXY = "maxy";
            static inline std::string  MAXZ = "maxz";
            static inline std::string  MOB = "mob";
            static inline std::string  MOUSE_DRAG_POINTER = "mouse_drag_pointer";
            static inline std::string  MOUSE_DROP_POINTER = "mouse_drop_pointer";
            static inline std::string  MOUSE_DROP_ZONE = "mouse_drop_zone";
            static inline std::string  MOUSE_OPACITY = "mouse_opacity";
            static inline std::string  MOUSE_OVER_POINTER = "mouse_over_pointer";
            static inline std::string  MOUSE_POINTER_ICON = "mouse_pointer_icon";
            static inline std::string  NAME = "name";
            static inline std::string  NEXT = "next";
            static inline std::string  OPACITY = "opacity";
            static inline std::string  OVERLAYS = "overlays";
            static inline std::string  OVERRIDE = "override";
            static inline std::string  PAN = "pan";
            static inline std::string  PARAMS = "params";
            static inline std::string  PARENT_TYPE = "parent_type";
            static inline std::string  PERSPECTIVE = "perspective";
            static inline std::string  PIXEL_W = "pixel_w";
            static inline std::string  PIXEL_X = "pixel_x";
            static inline std::string  PIXEL_Y = "pixel_y";
            static inline std::string  PIXEL_Z = "pixel_z";
            static inline std::string  PLANE = "plane";
            static inline std::string  PORT = "port";
            static inline std::string  PRELOAD_RSC = "preload_rsc";
            static inline std::string  PRIORITY = "priority";
            static inline std::string  REACHABLE = "reachable";
            static inline std::string  REALTIME = "realtime";
            static inline std::string  REPEAT = "repeat";
            static inline std::string  SCREEN = "screen";
            static inline std::string  SCREEN_LOC = "screen_loc";
            static inline std::string  SCRIPT = "script";
            static inline std::string  SEE_IN_DARK = "see_in_dark";
            static inline std::string  SEE_INFRARED = "see_infrared";
            static inline std::string  SEE_INVISIBLE = "see_invisible";
            static inline std::string  SHOW_MAP = "show_map";
            static inline std::string  SHOW_POPUP_MENUS = "show_popup_menus";
            static inline std::string  SHOW_VERB_PANEL = "show_verb_panel";
            static inline std::string  SIGHT = "sight";
            static inline std::string  SLEEP_OFFLINE = "sleep_offline";
            static inline std::string  STATOBJ = "statobj";
            static inline std::string  STATPANEL = "statpanel";
            static inline std::string  STATUS = "status";
            static inline std::string  STEP_SIZE = "step_size";
            static inline std::string  STEP_X = "step_x";
            static inline std::string  STEP_Y = "step_y";
            static inline std::string  SUFFIX = "suffix";
            static inline std::string  SYSTEM_TYPE = "system_type";
            static inline std::string  TAG = "tag";
            static inline std::string  TEXT = "text";
            static inline std::string  TICK_LAG = "tick_lag";
            static inline std::string  TICK_USAGE = "tick_usage";
            static inline std::string  TIME = "time";
            static inline std::string  TIMEOFDAY = "timeofday";
            static inline std::string  TRANSFORM = "transform";
            static inline std::string  TURF = "turf";
            static inline std::string  TYPE = "type";
            static inline std::string  UNDERLAYS = "underlays";
            static inline std::string  URL = "url";
            static inline std::string  VARS = "vars";
            static inline std::string  VERBS = "verbs";
            static inline std::string  VERSION = "version";
            static inline std::string  VIEW = "view";
            static inline std::string  VIRTUAL_EYE = "virtual_eye";
            static inline std::string  VISIBILITY = "visibility";
            static inline std::string  VOLUME = "volume";
            static inline std::string  WAIT = "wait";
            static inline std::string  X = "x";
            static inline std::string  Y = "y";
            static inline std::string  Z = "z";

            ByondVars() {}
    };
}

