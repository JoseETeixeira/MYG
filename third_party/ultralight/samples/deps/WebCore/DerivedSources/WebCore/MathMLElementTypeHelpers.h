/*
 * THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 * This file was generated by the dom/make_names.pl script.
 *
 * Copyright (C) 2005, 2006, 2007, 2008, 2009, 2013 Apple Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef MathMLElementTypeHelpers_h
#define MathMLElementTypeHelpers_h

#include "MathMLNames.h"

namespace WebCore {
class MathMLFractionElement;
}
namespace WTF {
template<typename ArgType> class TypeCastTraits<const WebCore::MathMLFractionElement, ArgType, false /* isBaseType */> {
public:
    static bool isOfType(ArgType& node) { return checkTagName(node); }
private:
    static bool checkTagName(const WebCore::MathMLElement& element) { return element.hasTagName(WebCore::MathMLNames::mfracTag); }
    static bool checkTagName(const WebCore::Node& node) { return node.hasTagName(WebCore::MathMLNames::mfracTag); }
    static bool checkTagName(const WebCore::EventTarget& target) { return is<WebCore::Node>(target) && checkTagName(downcast<WebCore::Node>(target)); }
};
}

namespace WebCore {
class MathMLMathElement;
}
namespace WTF {
template<typename ArgType> class TypeCastTraits<const WebCore::MathMLMathElement, ArgType, false /* isBaseType */> {
public:
    static bool isOfType(ArgType& node) { return checkTagName(node); }
private:
    static bool checkTagName(const WebCore::MathMLElement& element) { return element.hasTagName(WebCore::MathMLNames::mathTag); }
    static bool checkTagName(const WebCore::Node& node) { return node.hasTagName(WebCore::MathMLNames::mathTag); }
    static bool checkTagName(const WebCore::EventTarget& target) { return is<WebCore::Node>(target) && checkTagName(downcast<WebCore::Node>(target)); }
};
}

namespace WebCore {
class MathMLMencloseElement;
}
namespace WTF {
template<typename ArgType> class TypeCastTraits<const WebCore::MathMLMencloseElement, ArgType, false /* isBaseType */> {
public:
    static bool isOfType(ArgType& node) { return checkTagName(node); }
private:
    static bool checkTagName(const WebCore::MathMLElement& element) { return element.hasTagName(WebCore::MathMLNames::mencloseTag); }
    static bool checkTagName(const WebCore::Node& node) { return node.hasTagName(WebCore::MathMLNames::mencloseTag); }
    static bool checkTagName(const WebCore::EventTarget& target) { return is<WebCore::Node>(target) && checkTagName(downcast<WebCore::Node>(target)); }
};
}

namespace WebCore {
class MathMLOperatorElement;
}
namespace WTF {
template<typename ArgType> class TypeCastTraits<const WebCore::MathMLOperatorElement, ArgType, false /* isBaseType */> {
public:
    static bool isOfType(ArgType& node) { return checkTagName(node); }
private:
    static bool checkTagName(const WebCore::MathMLElement& element) { return element.hasTagName(WebCore::MathMLNames::moTag); }
    static bool checkTagName(const WebCore::Node& node) { return node.hasTagName(WebCore::MathMLNames::moTag); }
    static bool checkTagName(const WebCore::EventTarget& target) { return is<WebCore::Node>(target) && checkTagName(downcast<WebCore::Node>(target)); }
};
}

namespace WebCore {
class MathMLPaddedElement;
}
namespace WTF {
template<typename ArgType> class TypeCastTraits<const WebCore::MathMLPaddedElement, ArgType, false /* isBaseType */> {
public:
    static bool isOfType(ArgType& node) { return checkTagName(node); }
private:
    static bool checkTagName(const WebCore::MathMLElement& element) { return element.hasTagName(WebCore::MathMLNames::mpaddedTag); }
    static bool checkTagName(const WebCore::Node& node) { return node.hasTagName(WebCore::MathMLNames::mpaddedTag); }
    static bool checkTagName(const WebCore::EventTarget& target) { return is<WebCore::Node>(target) && checkTagName(downcast<WebCore::Node>(target)); }
};
}

namespace WebCore {
class MathMLSpaceElement;
}
namespace WTF {
template<typename ArgType> class TypeCastTraits<const WebCore::MathMLSpaceElement, ArgType, false /* isBaseType */> {
public:
    static bool isOfType(ArgType& node) { return checkTagName(node); }
private:
    static bool checkTagName(const WebCore::MathMLElement& element) { return element.hasTagName(WebCore::MathMLNames::mspaceTag); }
    static bool checkTagName(const WebCore::Node& node) { return node.hasTagName(WebCore::MathMLNames::mspaceTag); }
    static bool checkTagName(const WebCore::EventTarget& target) { return is<WebCore::Node>(target) && checkTagName(downcast<WebCore::Node>(target)); }
};
}

#endif
